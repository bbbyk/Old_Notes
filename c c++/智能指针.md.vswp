vnote_backup_file_826537664 /home/bbbyk/VNode/c c++/智能指针和动态内存.md
# 智能指针
防止使用动态内存的时候出现内存泄露和非法内存指针的出现，智能指针类能够自动的释放所指向的对象。  
智能指针的三个类 shared_ptr允许多个指针指向同一个对象，unique_ptr独占指向的对象，以及weak_ptr指向shared_ptr所管理的对象。  
## 1.shared_ptr类
是一个模板类，使用方法与普通的指针使用方法相同。  
```
// defined
shared_ptr<string> p1;
shared_ptr<list<int>> p2;
```
类中的get()方法要小心使用，返回保存的指针，但要使用的时候一定要确定智能指针没有释放对象。  

make_shared< Type > (args)函数 在动态内存中定义并初始化，返回一个shared_ptr类型，通常使用auto类型来定义。  
```
auto p = make_shared<vector<string>>();// 返回shared_ptr
```
shared_ptr中有一个计数器，拷贝这个智能指针时计数器就递增。当这个智能指针离开或者被赋予新值就递减。  
shared_ptr自动摧毁所管理的对象调用对应的析构函数。  
## 2. 动态内存和智能指针使用规范
* 使用new动态分配内置类型的对象时末尾添加**()**值初始化，不添加是默认初始化，通常是未定义的。  

* delete之后以前相关的指针也不能再使用了，同常是在相应指针要摧毁时使用 delete释放内存。否则要手动将存储了相应指针的变量置空。  

* shared_ptr和 new可以结合使用  
shared_prt的构造函数是 explicit 声明，不能将一个内置指针隐式转化成一个智能指针。但是可以通过shared_ptr的构造函数显示传入。如
```
    shared_ptr<int> p(new int(2014)); // 里外类型保持一致
    // shared_ptr<T> p(q, d) 定义p将使用可调用对象d来替代delete
```

* 不要混合使用普通指针和智能指针，使用内置指针来访问一个智能指针所负责的对象是很危险的，我们不知道对象何时被摧毁。  
```
void process(shared_ptr<int> ptr){
    //  使用ptr
} // ptr摧毁  引用计数--

case 1:
shared_ptr<int> p (new int(42)); //引用计数1
process(p); // p拷贝给ptr 计数2
int i =  *p; // 正确 在结束process函数和引用计数为1

caes2:
int *x(new int (1024)); // 危险情况，x是普通指针接下来与智能指针混用
process(shared_ptr<int>(x)); // 合法，但内存被释放
int j = *x; // 实参临时变量结束 x 被摧毁

```
* 不能使用get初始化另一个智能指针或为智能指针赋值  
get函数返回内置指针，指向智能指针的管理对象。拿到这个内置指针后我们不能对其**进行delete操作**和**以此指针初始化另一个新的智能指针**。  

* 智能指针能确保抛出异常时也能成功释放内存。抛出异常时没有相应的catch则会结束这个函数，出了作用域智能指针的计数器会--。相对的，如果使用的是内置指针，很可能无法执行到delete的语句而造成内存再也无法释放了。  

